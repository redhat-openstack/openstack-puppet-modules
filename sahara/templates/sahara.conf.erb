[DEFAULT]

#
# Options defined in sahara.config
#

# set host (string value)
host=<%= @sahara_host %>

# set port (integer value)
port=<%= @sahara_port %>


#
# Options defined in sahara.main
#

# Protocol used to access OpenStack Identity service (string
# value)
os_auth_protocol=<%= @keystone_auth_protocol %>

# IP or hostname of machine on which OpenStack Identity
# service is located (string value)
os_auth_host=<%= @keystone_auth_host %>

# Port of OpenStack Identity service (string value)
os_auth_port=<%= @keystone_auth_port %>

# This OpenStack user is used to verify provided tokens. The
# user must have admin role in <os_admin_tenant_name> tenant
# (string value)
os_admin_username=<%= @keystone_user %>

# Password of the admin user (string value)
os_admin_password=<%= @keystone_password %>

# Name of tenant where the user is admin (string value)

os_admin_tenant_name=<%= scope.lookupvar("sahara::keystone::auth::tenant") %>


#
# Options defined in sahara.openstack.common.db.sqlalchemy.session
#

# the filename to use with sqlite (string value)
#sqlite_db=sahara.sqlite

# If true, use synchronous mode for sqlite (boolean value)
#sqlite_synchronous=true


#
# Options defined in sahara.openstack.common.lockutils
#

# Whether to disable inter-process locks (boolean value)
#disable_process_locking=false

# Directory to use for lock files. Default to a temp directory
# (string value)
lock_path=<%= scope.lookupvar("sahara::params::sahara_lockdir") %>


#
# Options defined in sahara.openstack.common.log
#

# Print debugging output (set logging level to DEBUG instead
# of default WARNING level). (boolean value)
debug=<%= @sahara_debug %>

# Print more verbose output (set logging level to INFO instead
# of default WARNING level). (boolean value)
verbose=<%= @sahara_verbose %>

# Log output to standard error (boolean value)
#use_stderr=true

# format string to use for log messages with context (string
# value)
#logging_context_format_string=%(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user)s %(tenant)s] %(instance)s%(message)s

# format string to use for log messages without context
# (string value)
#logging_default_format_string=%(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s%(message)s

# data to append to log format when level is DEBUG (string
# value)
#logging_debug_format_suffix=%(funcName)s %(pathname)s:%(lineno)d

# prefix each line of exception output with this format
# (string value)
#logging_exception_prefix=%(asctime)s.%(msecs)03d %(process)d TRACE %(name)s %(instance)s

# list of logger=LEVEL pairs (list value)
#default_log_levels=amqplib=WARN,sqlalchemy=WARN,boto=WARN,suds=INFO,keystone=INFO,eventlet.wsgi.server=WARN

# publish error events (boolean value)
#publish_errors=false

# make deprecations fatal (boolean value)
#fatal_deprecations=false

# If an instance is passed with the log message, format it
# like this (string value)
#instance_format="[instance: %(uuid)s] "

# If an instance UUID is passed with the log message, format
# it like this (string value)
#instance_uuid_format="[instance: %(uuid)s] "

# If this option is specified, the logging configuration file
# specified is used and overrides any other logging options
# specified. Please see the Python logging module
# documentation for details on logging configuration files.
# (string value)
#log_config=<None>

# A logging.Formatter log message format string which may use
# any of the available logging.LogRecord attributes. This
# option is deprecated.  Please use
# logging_context_format_string and
# logging_default_format_string instead. (string value)
#log_format=<None>

# Format string for %%(asctime)s in log records. Default:
# %(default)s (string value)
#log_date_format=%Y-%m-%d %H:%M:%S

# (Optional) Name of log file to output to. If no default is
# set, logging will go to stdout. (string value)
log_file=<%= scope.lookupvar("sahara::params::sahara_logdir") %>/sahara.log

# (Optional) The base directory used for relative --log-file
# paths (string value)
# log_dir=<%= scope.lookupvar("sahara::params::sahara_logdir") %>

# Use syslog for logging. (boolean value)
use_syslog=<%= scope.lookupvar("sahara::params::sahara_syslog") %>

# syslog facility to receive log lines (string value)
#syslog_log_facility=LOG_USER


#
# Options defined in sahara.openstack.common.notifier.api
#

# Driver or drivers to handle sending notifications (multi
# valued)
#notification_driver=

# Default notification level for outgoing notifications
# (string value)
#default_notification_level=INFO

# Default publisher_id for outgoing notifications (string
# value)
#default_publisher_id=$host


#
# Options defined in sahara.plugins.base
#

# TODO(dizz): parameterise the following!
# List of plugins to be loaded. Sahara preserves the order of
# the list when returning it. (list value) - vanilla, hdp
plugins=vanilla

[plugin:vanilla]
plugin_class=sahara.plugins.vanilla.plugin:VanillaProvider

#[plugin:hdp]
#plugin_class=sahara.plugins.hdp.plugin:AmbariPlugin

#
# Options defined in sahara.service.networks
#

# When set to false, Sahara uses only internal IP of VMs.
# When set to true, Sahara expects OpenStack to auto-assign
# floating IPs to cluster nodes. Internal IPs will be used for
# inter-cluster communication, while floating ones will be
# used by Sahara to configure nodes. Also floating IPs will
# be exposed in service URLs. (boolean value)
use_floating_ips=<%= scope.lookupvar("sahara::params::sahara_usefips") %>

# The suffix of the node's FQDN. In nova-network that is
# dhcp_domain config parameter (string value)
node_domain=<%= scope.lookupvar("sahara::params::sahara_node_domain") %>


[database]

#
# Options defined in sahara.db.migration.cli
#

# URL to database (string value)
# connection=sqlite:////tmp/sahara-server.db
connection=mysql://<%= @sahara_db_user %>:<%= @sahara_db_password %>@<%= @db_host %>/<%= @sahara_db_name %>


#
# Options defined in sahara.openstack.common.db.api
#

# The backend to use for db (string value)
#backend=sqlalchemy

# Enable the experimental use of thread pooling for all DB API
# calls (boolean value)
#use_tpool=false


#
# Options defined in sahara.openstack.common.db.sqlalchemy.session
#

# The SQLAlchemy connection string used to connect to the
# database (string value)
#connection=sqlite:////sahara/openstack/common/db/$sqlite_db

# The SQLAlchemy connection string used to connect to the
# slave database (string value)
#slave_connection=

# timeout before idle sql connections are reaped (integer
# value)
#idle_timeout=3600

# Minimum number of SQL connections to keep open in a pool
# (integer value)
#min_pool_size=1

# Maximum number of SQL connections to keep open in a pool
# (integer value)
#max_pool_size=<None>

# maximum db connection retries during startup. (setting -1
# implies an infinite retry count) (integer value)
#max_retries=10

# interval between retries of opening a sql connection
# (integer value)
#retry_interval=10

# If set, use this value for max_overflow with sqlalchemy
# (integer value)
#max_overflow=<None>

# Verbosity of SQL debugging information. 0=None,
# 100=Everything (integer value)
#connection_debug=0

# Add python stack traces to SQL as comment strings (boolean
# value)
#connection_trace=false

# If set, use this value for pool_timeout with sqlalchemy
# (integer value)
#pool_timeout=<None>


# Total option count: 51
