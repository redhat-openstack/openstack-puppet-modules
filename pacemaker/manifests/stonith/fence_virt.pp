# generated by agent_generator.rb, manual changes will be lost

class pacemaker::stonith::fence_virt (
	$debug = undef,
	$serial_device = undef,
	$serial_params = undef,
	$channel_address = undef,
	$ipport = undef,
	$port = undef,
	$timeout = undef,
	$delay = undef,
	$domain = undef,

	$interval = "60s",
	$ensure = present,
	$pcmk_host_value = undef,

) {
  $real_address = "$(corosync-cfgtool -a $(crm_node -n))"

  if($ensure == absent) {
    exec {
      "Removing stonith::fence_virt":
      command => "/usr/sbin/pcs stonith delete stonith-fence_virt-${real_address}",
      onlyif => "/usr/sbin/pcs stonith show stonith-fence_virt-${real_address} > /dev/null 2>&1",
      require => Class["pacemaker::corosync"],
    }
  } else {
  	$debug_chunk = $debug ? {
		undef => "",
		default => "debug=\"${debug}\"",
	}
	$serial_device_chunk = $serial_device ? {
		undef => "",
		default => "serial_device=\"${serial_device}\"",
	}
	$serial_params_chunk = $serial_params ? {
		undef => "",
		default => "serial_params=\"${serial_params}\"",
	}
	$channel_address_chunk = $channel_address ? {
		undef => "",
		default => "channel_address=\"${channel_address}\"",
	}
	$ipport_chunk = $ipport ? {
		undef => "",
		default => "ipport=\"${ipport}\"",
	}
	$port_chunk = $port ? {
		undef => "",
		default => "port=\"${port}\"",
	}
	$timeout_chunk = $timeout ? {
		undef => "",
		default => "timeout=\"${timeout}\"",
	}
	$delay_chunk = $delay ? {
		undef => "",
		default => "delay=\"${delay}\"",
	}
	$domain_chunk = $domain ? {
		undef => "",
		default => "domain=\"${domain}\"",
	}

    $pcmk_host_value_chunk = $pcmk_host_list ? {
      '' => '$(/usr/sbin/crm_node -n)',
      default => "${pcmk_host_list}",
    }

    package {
      "fence-virt": ensure => installed,
    } -> exec {
      "Creating stonith::fence_virt":
      command => "/usr/sbin/pcs stonith create stonith-fence_virt-${real_address} fence_virt pcmk_host_list=\"${pcmk_host_value_chunk}\" ${debug_chunk} ${serial_device_chunk} ${serial_params_chunk} ${channel_address_chunk} ${ipport_chunk} ${port_chunk} ${timeout_chunk} ${delay_chunk} ${domain_chunk}  op monitor interval=${interval}",
      unless => "/usr/sbin/pcs stonith show stonith-fence_virt-${real_address} > /dev/null 2>&1",
      require => Class["pacemaker::corosync"],
    } -> exec {
      "Adding non-local constraint stonith::fence_virt ${real_address}":
      command => "/usr/sbin/pcs constraint location stonith-fence_virt-${real_address} avoids ${pcmk_host_value_chunk}"
    }
  }
}
