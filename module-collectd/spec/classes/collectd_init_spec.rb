require 'spec_helper'

describe 'collectd' do
  let :facts do
    { :osfamily => 'RedHat' }
  end

  it { should contain_package('collectd').with_ensure('installed') }
  it { should contain_package('collectd').with_install_options(nil) }
  it { should contain_service('collectd').with_ensure('running') }
  it { should contain_file('collectd.conf').without_content }
  it { should contain_file('collectd.d').with_ensure('directory') }
  it { should contain_file_line('include_conf_d') }
  it { is_expected.to contain_class('collectd::install').that_comes_before('Class[collectd::config]') }
  it { is_expected.to contain_class('collectd::config').that_notifies('Class[collectd::service]') }
  it { is_expected.to contain_class('collectd::service') }

  context 'with collectd::install::package_install_options' do
    context 'set to a valid array' do
      let :params do
        { :package_install_options => ['--nogpgcheck'] }
      end

      it { should contain_package('collectd').with_install_options(['--nogpgcheck']) }
    end

    context 'set to an invalid value (non-array)' do
      let :params do
        { :package_install_options => 'not_an_array' }
      end

      it 'should fail' do
        expect do
          should contain_class('collectd')
        end.to raise_error(Puppet::Error, /is not an Array/)
      end
    end
  end

  context 'on non supported operating systems' do
    let(:facts) { { :osfamily => 'foo' } }

    it 'should fail' do
      should compile.and_raise_error(/foo is not supported/)
    end
  end

  context 'when purge_config is enabled' do
    let(:params) { { :purge_config => true } }

    it { is_expected.to contain_file('collectd.conf').with_content(/FQDNLookup true/) }
    it { is_expected.to contain_file('collectd.conf').with_content(/Interval/) }
    it { is_expected.to contain_file('collectd.conf').with_content(/Timeout/) }
    it { is_expected.to contain_file('collectd.conf').with_content(/ReadThreads/) }
    it { is_expected.to contain_file('collectd.conf').without_content(/^TypesDB/) }
    it { is_expected.to contain_file('collectd.conf').without_content(/^WriteQueueLimitLow/) }
    it { is_expected.to contain_file('collectd.conf').without_content(/^WriteQueueLimitHigh/) }
    it { is_expected.to contain_file('collectd.conf').without_content(/^CollectInternalStats/) }
    it { should_not contain_file_line('include_conf_d') }
    it do
      should contain_file('collectd.conf').with_content(/^# Generated by Puppet$/)
    end

    context 'with fqdnlookup => false' do
      let(:params) { { :purge_config => true, :fqdnlookup => false } }
      it { is_expected.to contain_file('collectd.conf').with_content(/^FQDNLookup false/) }
    end

    context 'with typesdb => ["/path/to/types.db"]' do
      let(:params) { { :purge_config => true, :typesdb => ['/path/to/types.db'] } }
      it { is_expected.to contain_file('collectd.conf').with_content(%r{^TypesDB "/path/to/types.db"}) }
    end

    context 'with write_queue_limit_low => 100' do
      let(:params) { { :purge_config => true, :write_queue_limit_low => '100' } }
      it { is_expected.to contain_file('collectd.conf').with_content(/^WriteQueueLimitLow 100/) }
    end

    context 'with write_queue_limit_high => 100' do
      let(:params) { { :purge_config => true, :write_queue_limit_high => '100' } }
      it { is_expected.to contain_file('collectd.conf').with_content(/^WriteQueueLimitHigh 100/) }
    end

    context 'with include => ["/some/include/path"]' do
      let(:params) { { :purge_config => true, :include => ['/some/include/path'] } }
      it { is_expected.to contain_file('collectd.conf').with_content(%r{^Include "/some/include/path"}) }
    end

    context 'with internal_stats => true' do
      context 'with collectd_real_version = 5.5' do
        let(:facts) { { :osfamily => 'RedHat', :collectd_real_version => '5.5' } }
        let(:params) { { :purge_config => true, :internal_stats => true } }
        it { is_expected.to contain_file('collectd.conf').without_content(/^CollectInternalStats/) }
      end

      context 'with collectd_real_version = 5.6' do
        let(:facts) { { :osfamily => 'RedHat', :collectd_real_version => '5.6' } }
        let(:params) { { :purge_config => true, :internal_stats => true } }
        it { is_expected.to contain_file('collectd.conf').with_content(/^CollectInternalStats true/) }
      end
    end
  end

  context 'when custom package_name is set' do
    let(:params) { { :package_name => 'collectd-core' } }
    it { should contain_package('collectd-core').with_ensure('installed') }
  end

  context 'when manage_package is false' do
    let(:params) { { :manage_package => false } }
    it { should_not contain_package('collectd') }
  end

  context 'when manage_package is true' do
    let(:params) { { :manage_package => true } }
    it { should contain_package('collectd').with_ensure('installed') }
  end
end
